@{
    ViewBag.Title = "功能管理";
}
<link href="~/Scripts/bootstrap/css/icon-picker.css" rel="stylesheet" />
<script src="~/Scripts/bootstrap/js/iconPicker.js"></script>
<style type="text/css">
    #mainForm .mini-textbox, #mainForm textarea {
        width: 400px;
    }
    #IconClass {
        width: 360px !important;
        height: 21px !important;
        border: 1px solid #a5acb5 !important;
        border-radius: 0px !important;
        border-right: 0px !important;
    }

    .pointer {
        width: 40px !important;
        height: 21px !important;
        border: 1px solid #a5acb5 !important;
        padding: 2px 10px !important;
        float: left !important;
        border-radius: 0px !important;
        background: white !important;
    }
</style>
<div class="mini-splitter frame-fit" style="width:100%;padding:0">
    <div size="30%" showcollapsebutton="true" style="padding:5px;">
        <ul id="catalogTree" class="mini-tree frame-fit frame-search-tree" url="@Url.Action("GetAll", "Functions")" style="width:100%"
            checkrecursive="true" showcheckbox="true" showtreeicon="true" textfield="Name" idfield="Id" parentfield="ParentId" iconfield="IconClass" resultastree="false" expandonload="1"
            onnodeselect="zTreeOnClick" onload="reLocateNode()" ondrawnode="onDrawNode" 
            allowdrop="true" allowleafdropin="true"></ul>
    </div>
    <div style="overflow:auto">
        <table id="mainForm" class="boxcls">
            <tr>
                <td class="right"><label for="Id$text">ID：</label></td>
                <td>
                    <input name="Id" id="Id" class="mini-textbox" required="true" requirederrortext="@JStr.Need ID" />
                </td>
            </tr>
            <tr>
                <td class="right"><label for="Name">@JStr.Name</label></td>
                <td>
                    <input name="Name" id="Name" class="mini-textbox" required="true" requirederrortext="@Html.Str(" need+function+name")" />
                </td>
            </tr>
            <tr>
                <td class="right"><label for="Location">@JStr.Address</label></td>
                <td>
                    <input name="Location" id="Location" class="mini-textbox" />
                </td>
            </tr>
            <tr>
                <td class="right"><label for="Location">@Html.Str("Parameter")</label></td>
                <td>
                    <div>说明：参数格式是 参数名=值(或匹配值的正则表达式)，每行填一个</div>
                    <textarea name="Parameter" id="Parameter" class="mini-textarea"></textarea>
                </td>
            </tr>
            <tr>
                <td class="right"><label for="IconLocation">@Html.Str("Icon+Address")</label></td>
                <td>
                    <input name="IconLocation" id="IconLocation" class="mini-textbox" />
                </td>
            </tr>
            <tr>
                <td class="right"><label for="IconClass">@Html.Str("CSS")</label></td>
                <td>
                    <input name="IconClass" id="IconClass" type="text" />
                </td>
            </tr>
            <tr>
                <td class="right"><label for="Method">@Html.Str("Submit+Method")</label></tdclass>
                <td>
                    <input name="Method" id="Method" class="mini-combobox" value="@((int)WebMethod.GET)" />
                </td>
            </tr>
            <tr>
                <td class="right"><label for="AuthType">@Html.Str("Authorize+Type")</label></td>
                <td>
                    <input name="AuthType" id="AuthType" class="mini-combobox" />
                </td>
            </tr>
            <tr>
                <td class="right"><label for="chkVisible">@Html.Str("Visible+Type")</label></td>
                <td>
                    <input type="hidden" name="Visible" id="Visible" />
                    <div name="chkVisible" id="chkVisible" class="mini-checkboxlist" repeatitems="4"
                         repeatlayout="flow"></div>
                </td>
            </tr>
            <tr>
                <td class="right"><label for="Description">@JStr.Description</label></td>
                <td>
                    <input name="Description" id="Description" class="mini-textbox" />
                </td>
            </tr>
            <tr>
                <td class="right"><label for="ParentId">@Html.Str("Parent")ID</label></td>
                <td>
                    <input name="ParentId" id="ParentId" class="mini-textbox" />
                </td>
            </tr>
            <tr>
                <td class="right"><label for="Ord">@JStr.Order</label></td>
                <td>
                    <input name="Ord" id="Ord" class="mini-textbox" />
                </td>
            </tr>
            <tr>
                <td class="right"><label for="ControllerName">@Html.Str("Class+Name")</label></td>
                <td>
                    <input name="ControllerName" id="ControllerName" class="mini-textbox" />
                </td>
            </tr>
            <tr>
                <td class="right"><label for="ActionName">@Html.Str("Method+Name")</label></td>
                <td>
                    <input name="ActionName" id="ActionName" class="mini-textbox" />
                </td>
            </tr>
        </table>
    </div>
</div>
<script type="text/javascript">
    var currentId;
    var visibleOptions = [
        { id: "@((int)VisibleType.Menu)", text: "用户可见" },
        { id: "@((int)VisibleType.Role)", text: "权限控制" },
        { id: "@((int)VisibleType.GroupBegin)", text: "分组第一项" },
        { id: "@((int)VisibleType.Container)", text: "自定义容器" },
        { id: "@((int)VisibleType.Button)", text: "按钮" },
        { id: "@((int)VisibleType.QuckAccessBar)", text: "快速访问" },
        { id: "@((int)VisibleType.Top)", text: "置顶项" },
        { id: "@((int)VisibleType.Widget)", text: "首页部件" }
    ];

    var postOptions = [
        { id: "@((int)WebMethod.GET)", text: "GET" },
        { id: "@((int)WebMethod.POST)", text: "POST" },
        { id: "@((int)WebMethod.PUT)", text: "PUT" },
            { id: "@((int)WebMethod.DELETE)", text: "DELETE" },
            { id: "@((int)WebMethod.OPTIONS)", text: "OPTIONS" },
            { id: "@((int)WebMethod.PATCH)", text: "PATCH" }
    ];

    var authOptions = [
        { id: "@((int)JAuthType.AllUsers)", text: "所有登录用户" },
        { id: "@((int)JAuthType.EveryOne)", text: "所有人" },
        { id: "@((int)JAuthType.Forbidden)", text: "禁止所有人" },
        { id: "@((int)JAuthType.NeedAuth)", text: "有权限的用户" },
        { id: "@((int)JAuthType.Ignore)", text: "忽略" }
    ];

    var formInfo;

    function getFormInfo() {
        var r;
        $('#mainForm input').each(function () {
            r += $(this).val();
        });
        return r;
    }
    function getFormNodeInfo() {
        // ---- 取得数据
        var updatedData = {};

        //数据取值有问题，当输入焦点还在文本输入框内时，取得是老的值。

        //updatedData.Id = mini.get('#Id').getValue();
        //updatedData.Name = mini.get('#Name').getValue();

        //updatedData.Location = mini.get('#Location').getValue();
        //updatedData.Parameters = mini.get('#Parameter').getValue();
        //updatedData.IconLocation = mini.get('#IconLocation').getValue();
        //updatedData.IconClass = $("#IconClass").val();
        //updatedData.Method = mini.get('#Method').getValue();
        //updatedData.AuthType = mini.get('#AuthType').getValue();
        //updatedData.Visible = $('#Visible').val();
        //updatedData.chkVisible = mini.get('#chkVisible').getValue();
        //updatedData.Description = mini.get('#Description').getValue();
        //updatedData.ParentId = mini.get('#ParentId').getValue();
        //updatedData.Ord = mini.get('#Ord').getValue();
        //updatedData.ControllerName = mini.get('#ControllerName').getValue();
        //updatedData.ActionName = mini.get('#ActionName').getValue();
        
        var mainFormForm = new mini.Form("mainForm");

        //表单数据，整体的取值也有问题，当输入焦点还在文本输入框内时，取得是老的值。

        //获取表单的数据
        var mainForm = mainFormForm.getData();
        
        updatedData.Id = mainForm.Id;
        updatedData.Name = mainForm.Name;

        updatedData.Location = mainForm.Location;
        updatedData.Parameters = mainForm.Parameters;
        updatedData.IconLocation = mainForm.IconLocation;
        updatedData.IconClass = mainForm.IconClass;
        updatedData.Method = mainForm.Method;
        updatedData.AuthType = mainForm.AuthType;
        updatedData.Visible = mainForm.Visible;
        updatedData.chkVisible = mainForm.chkVisible;
        updatedData.Description = mainForm.Description;
        updatedData.ParentId = mainForm.ParentId;
        updatedData.Ord = mainForm.Ord;
        updatedData.ControllerName = mainForm.ControllerName;
        updatedData.ActionName = mainForm.ActionName;

        updatedData.IconClass = $("#IconClass").val();
        updatedData.Visible = $('#Visible').val();

        return updatedData;
    }

    mini.parse();
    var treeObj = mini.get("#catalogTree");
    mini.get('#chkVisible').setData(visibleOptions);
    mini.get("#Method").setData(postOptions);
    mini.get("#AuthType").setData(authOptions);

    //2016/3/30 图标CSS样式表添加可视化图标选择组件
    var cssBox = $("#IconClass");
    cssBox.iconPicker();


    //定义全局变量，在点击节点后重新赋值，
    //点击下一个节点前判断是否有改变，若改变了则保存Node
    //为了后期对比匹配做的准备工作
    $('#Visible').val(0);

    formInfo = getFormInfo();
    
    function onDrawNode(e) {

        var node = e.node;

        e.nodeHtml = GetShowText(node);

    }
    function GetShowText(node)
    {
        var post = "";
        if (node.Method == "@((int)WebMethod.POST)")
        {
            post = "[POST]";
        }
        var para = "";
        if (node.Parameters.length > 0)
        {
            para = "(" + node.Parameters.cast(function (p) { return p.Name }).join(', ') + ")";
        }
        var p = node.Id + ":" + node.Name + post + " " + para;
        return p;
    }

    var selectedNode;

    function zTreeOnClick(e) {
        
        if (!e.node) {
            
            selectedNode == null;
            return;
        }
        
        if (selectedNode != null) {            
            getVisible();//从新获取“可见类型”的值

            var temp = getFormInfo();
            //判断数据是否被修改
            if (temp != formInfo) {
                
                //获取数据
                var updatedData = getFormNodeInfo();

                //判断节点Id值是否改变，如果有改变，必须修改此节点的下级节点parentId值
                if (!(selectedNode.Id == updatedData.Id)) {                    
                    var children = treeObj.getChildNodes(selectedNode);
                    for (var i = 0; i < children.length; i++) {
                        children[i].ParentId = updatedData.Id;
                    }
                }

                //更新节点
                treeObj.updateNode(selectedNode, updatedData);

                
            }
        }

        selectedNode = e.node;
        
        setFormNodeInfo(e.node)

        formInfo = "";
        setVisible();
        formInfo = getFormInfo();

    };

    //function dodragstart(e) {
    //    alert("dodragstart");        
    //};

    //function dobeforenodeselect(e) {
    //    alert("dobeforenodeselect");
    //};

    function setFormNodeInfo(func) {
        
        //页面的ID属性需要和传过来的ReuturnValue中的属性名相同
        for (p in func) {
            var control = mini.get('#' + p);
            if (control)
                control.setValue(func[p]);
            else {
                $('#' + p).val(func[p]);
            }
        }

        if (func.Parameters.length > 0) {
            mini.get('#Parameter').setValue(func.Parameters.cast(function (p) { return p.Name + '=' + p.ValuePattern }).join('\n'));
        }
        else {
            mini.get('#Parameter').setValue('');
        }
      
       
        if (mini.get('#Id').getValue()) {
        //    alert(mini.get('#Id').getValue());
            //这里如用mini.get('#Id').disable(),不知为何提交不了ID
            //在前期调整后id值将不会为空,因此每次都会进入该判断,
            //由于浏览器兼容问题在ie下此文本组件永远为只读的情况,
            //而且现在保存时验证了重复id的情况因此取消该组件的控制 by_zjf,
            //mini.get('#Id').getEl().disabled = true;
        }
        else {

            var node = GetCurrentNode();

            //对于新增结点右侧的表单，直接引用树结点自带的数据
            mini.get('#Ord').setValue(node.ord);
            mini.get("#ParentId").setValue(node.pId);
            mini.get('#Name').setValue(node.name);

            mini.get('#Id').getEl().disabled = false;
            mini.get('#Id').focus();
        }

    };

    function ztreeCss(treeId, treeNode) {
        //给菜单可见的元素加粗
        var css = {};
        if ((treeNode.visible & 1) == 1)
            css["font-weight"] = "bold";
        if ((treeNode.visible & 2) == 2) {
            css["color"] = "blue";
        }
        return css;
    }


    function GetCurrentNode() {
        var node = treeObj.getSelectedNode();
        return node;
    }

    function addBrother() {
        
        var node = GetCurrentNode();
        if (!node) {
            return;
        }
        if (node) node = treeObj.getParentNode(node);
        
        var newNode = { Name: "New Node", Ord: GetMaxOrd(node), ParentId: node ? node.Id : null, Id: "0", IconClass: "", Method: "@((int)WebMethod.GET)", Parameters: [] };
        treeObj.addNode(newNode, newNode.Ord, node);
        treeObj.selectNode(newNode);

    }

    function addChild() {

        var node = GetCurrentNode();
        if (!node) {
            return;
        }
        if (!node.Id) {
            return;
        }
        
        var newNode = { Name: "New Node", Ord: GetMaxOrd(node), ParentId: node.Id, Id: "0", IconClass : "", Method : "@((int)WebMethod.GET)", Parameters : [] };        
        treeObj.addNode(newNode, newNode.Ord, node);        
        treeObj.expandNode(node);
        treeObj.selectNode(newNode);

    }

    function isRepeat(ary) {
        var nary = ary.sort();
        
        for (var i = 0; i < nary.length; i++) {
            for (var k = i + 1; k < nary.length; k++) {
                if (nary[i] == nary[k]) {
                    return nary[i];
                }
            }
        }
        return null;
    }
    function isRepeat2(arr) {
        var hash = {};
        for (var i in arr) {
            if (hash[arr[i]])
                return arr[i];
            hash[arr[i]] = true;
        }
        return null;
    }

    //获取结点的同级内索引序号
    function getNodeIndex(node) {
        var pNode = treeObj.getParentNode(node);
        var children = treeObj.getChildNodes(pNode);
        for (var i = 0; i < children.length; i++) {
            if (children[i] == node) {
                return i;
            }
        }
        return -1;
    }

    //获取结点的上层兄弟
    function getPrevNode(node) {
        var pNode = treeObj.getParentNode(node);
        var children = treeObj.getChildNodes(pNode);
        for (var i = 1; i < children.length; i++) {
            if (children[i] == node) {
                return children[i - 1];
            }
        }
        return null;
    }

    //获取结点的下层兄弟
    function getNextNode(node) {
        var pNode = treeObj.getParentNode(node);
        var children = treeObj.getChildNodes(pNode);
        for (var i = 0; i < children.length - 1; i++) {
            if (children[i] == node) {
                return children[i + 1];
            }
        }
        return null;
    }

    function GetMaxOrd(parentNode) {
        parentNode = parentNode || treeObj.getRootNode();
        var nodes = treeObj.getChildNodes(parentNode);
        var ord = 0;
        if (nodes) {
            for (var i = 0; i < nodes.length; i++) {
                if (nodes[i].Ord > ord) ord = nodes[i].Ord;
            }
        }
        return ord + 1;
    }

    function getCheckedNodeIds() {
        var nodes = treeObj.getCheckedNodes();
        
        var idArr = [];
        for (var i = 0; i < nodes.length; i++) {
            idArr.push(nodes[i].Id);
        }
        return idArr;
    }

    function reLocateNode() {
        if (currentId) {
            var node = treeObj.getNode({ id: currentId });
            var pNode = treeObj.getParentNode(node);
            if (pNode) treeObj.expandNode(pNode);
            treeObj.selectNode(node);
        }
    }

    //重新加载数据
    function reloadData() {
        treeObj.load('@Url.Action("GetAll","Functions")');
    }

    function checkNode() {
        var node = GetCurrentNode();
        if (!node) {
            showTips({ Type: "warning", Message: "You should select a node" });
        }

        if (!node.id) {
            showTips({ Type: "warning", Message: "You should save this node before this operation." });
        }
        return node;
    }


    var restValue = 0;
    function getVisible() {
        var visibleStr = mini.get('#chkVisible').getValue() || "";
        var val = 0;
        var arr = visibleStr.split(',');
        for (var i = 0; i < arr.length; i++) {
            if (arr[i]) {
                val += parseInt(arr[i]);
            }
        }
        $('#Visible').val(val + restValue);
    }

    $('form').bind("beforeSubmit", getVisible);//绑定在提交前重新计算Visible的值

    function setVisible() {
        var val = parseInt($('#Visible').val());
        var arr = [];
        for (var i in visibleOptions) {
            if ((val & visibleOptions[i].id) == visibleOptions[i].id) {
                val = val - parseInt(visibleOptions[i].id);
                arr.push(visibleOptions[i].id);
            }
        }
        mini.get('#chkVisible').setValue(arr.join(','));
        restValue = val;
    }

    $.regButton({ text: "新增平级", noSubmit: addBrother });
    $.regButton({ text: "新增子级", noSubmit: addChild });

    $.regButton({ text: "删除", noSubmit: deleteSelectedNode });
    function deleteSelectedNode() {

        var nodes = treeObj.getCheckedNodes();

        if (!nodes.length) {
            alert("没有节点被勾选。");
            return;
        }
        if (!confirm('是否删除选中节点?')) {
            return;
        }
        
        treeObj.removeNodes(nodes);
        treeObj.uncheckAllNodes();
        
        //删除操作之后，默认选择第一个节点
        treeObj.selectNode(treeObj.getList()[0]);
    }

    $.regButton({ text: "上移", noSubmit: upMoveNode });
    function upMoveNode() {

        var node = GetCurrentNode();
        if (!node) {
            return;
        }
        if (!node.Id) {
            return;
        }

        treeObj.moveNode(node, getPrevNode(node), "before")
        treeObj.selectNode(node);

    }

    $.regButton({ text: "下移", noSubmit: downMoveNode });
    function downMoveNode() {

        var node = GetCurrentNode();
        if (!node) {
            return;
        }
        if (!node.Id) {
            return;
        }

        treeObj.moveNode(node, getNextNode(node), "after")
        treeObj.selectNode(node);

    }

    $.regButton({ text: "移动", noSubmit: freeMoveNode });
    function freeMoveNode() {

        var node = GetCurrentNode();
        if (!node) {
            return;
        }
        if (!node.Id) {
            return;
        }

        var pId = prompt("请输入要移动到的父结点ID,0代表移到顶级", '0');
        if (!pId) {
            return;
        }
        
        //移动到顶级
        if (pId == "0") {
            var root = treeObj.getRootNode();
            treeObj.moveNode(node, root, "add");

            treeObj.updateNode(node, { ParentId: "" });
            mini.get("#ParentId").setValue("");
            return;
        }


        //获得所有子节点集合
        var children = treeObj.getAllChildNodes(node);
        children.push(node);

        //判断
        for (var i = 0; i < children.length; i++) {
            if (children[i].Id == pId) {
                alert("不能自己移动到自己");
                return;
            }
        }
        
        //查找父节点
        var pnodes = treeObj.findNodes(function (node) {
            if (node.Id == pId) return true;
        });
        if (pnodes.length < 1) {
            alert("没找到要移动到的父节点：" + pId);
            return;
        }
        
        //移动节点
        treeObj.moveNode(node, pnodes[0], "add");

    }

    $.regButton({
        text: "保存",
        beforeSubmit: function (ajax) {
            //当前节点的编辑信息更新
            var snode = GetCurrentNode();
            if (snode != null) {
                zTreeOnClick({
                    sender: null,         //树对象
                    node: snode,           //节点对象
                    isLeaf: false
                });
            }

            if (!treeObj.isChanged()) {
                alert("没有修改，不需保存。");
                ajax.cancel = true;
                return;
            }

            //获取节点数组
            var data = treeObj.getList();

            //判断id是否有空值
            for (var i = 0; i < data.length; i++) {
                if (data[i].Id == "") {
                    alert("不能保存，有个节点ID是空值。");
                    ajax.cancel = true;
                    return;
                }
            }
            //判断id是否有“0”值
            for (var i = 0; i < data.length; i++) {
                if (data[i].Id == "0") {
                    alert("不能保存，有个节点ID是“0”值。");
                    ajax.cancel = true;
                    return;
                }
            }
            //判断重复的节点ID
            var tempNodeIds = [];
            for (var i = 0; i < data.length; i++) {
                tempNodeIds.push(data[i].Id);
            }
            
            var nodeid = isRepeat(tempNodeIds)
            if (nodeid != null) {
                alert("不能保存，有重复的节点ID:" + nodeid);
                ajax.cancel = true;
                return;
            }
            
            var json = mini.encode(data);
            //请求数据
            ajax.data = { data: json };
            
            //清除所有行修改痕迹
            treeObj.accept();

        }
    });

    $.regButton({ text: "复制", noSubmit: cloneNode });
    function cloneNode() {

        var node = GetCurrentNode();
        if (!node) {
            return;
        }
        if (!node.Id) {
            return;
        }

        pnode = treeObj.getParentNode(node);

        // 浅层复制（只复制顶层的非 object 元素）
        // var newObject = jQuery.extend({}, oldObject);
        // 深层复制（一层一层往下复制直到最底层）
        // var newObject = jQuery.extend(true, {}, oldObject);

        var newnode = $.extend(true, {}, node);

        treeObj.addNode(newnode, newnode.Ord, pnode);
        treeObj.selectNode(newnode);
    }

</script>
