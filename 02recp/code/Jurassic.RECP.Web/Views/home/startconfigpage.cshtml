@{
  
    Layout = "~/Views/Shared/_FormLayout.cshtml";
    var model = ViewData["userCookie"] as Jurassic.WebFrame.Models.UserCookieModel;
    HtmlString widget = new HtmlString(Jurassic.AppCenter.JsonHelper.ToJson(model, false));
    HtmlString widgetList = new HtmlString(Jurassic.AppCenter.JsonHelper.ToJson(ViewBag.WidgetList, false));
    HtmlString chkWidgetIds = new HtmlString(Jurassic.AppCenter.JsonHelper.ToJson(ViewBag.ChkWidgetIds, false));
    HtmlString columnsIds = new HtmlString(Jurassic.AppCenter.JsonHelper.ToJson(ViewBag.ColumnsIds, false));
}

<div class="mini-splitter frame-fit" style="width:100%">
    <div size="15%">
        <div id="cblwidgit" class="mini-checkboxlist" repeatitems="1" repeatlayout="flow" repeatdirection="horizontal"
             textfield="WidgetTitle" valuefield="WidgetId" onvaluechanged="chkWidgitChanged">
        </div>
    </div>
    <div id="content">
    </div>
</div>

<link href="~/Scripts/portal/portal.css" rel="stylesheet" type="text/css" />
<script src="~/Scripts/portal/Portal.js" type="text/javascript"></script>
<script type="text/javascript">

    var widget = @widget;
    var widgetList = @widgetList;
    var chkWidgetIds = @chkWidgetIds;
    var colLayout=mini.decode(widget.PanelIncision);

    var portal = new mini.ux.Portal();
    portal.set({
        style: "width: "+ widget.PanelWidth +"%;height:"+widget.PanelHeight+"%",
        //columns: [widget.PanelIncision+"%", (100 - widget.PanelIncision)+"%"]
        columns: colLayout
    });
    //mini.decode ( json, autoParseDate )
    portal.render(document.getElementById('content'));
    //debugger;
    mini.parse();

    mini.get('#cblwidgit').setData(widgetList);
    mini.get('#cblwidgit').setValue(chkWidgetIds.join(','));

    //panel
    var panels = [];
    for (var i = 0; i < widget.Widgets.length; i++) {
        panels.push({
            column: widget.Widgets[i].WidgetColumn,
            id: widget.Widgets[i].WidgetId,
            title: widget.Widgets[i].WidgetTitle,
            showCollapseButton: widget.Widgets[i].WidgetShowCloseButton,
            body: "#"+widget.Widgets[i].WidgetBody,
            height: widget.Widgets[i].WidgetHeight,
            url: widget.Widgets[i].RenderUrl
        });
        //var grid = mini.get(widget.Widgets[i].Widget.GridId);
        //grid.load();
    };
    portal.setPanels(panels);

    //var bodyEl = portal.getPanelBodyEl("p2");
    //bodyEl.appendChild(document.getElementById("Button2"));

    ////获取配置的panels信息
    //var panels = portal.getPanels();
    //alert(panels.length);

    function chkWidgitChanged(chk) {
        var checkedWidgitIds = chk.value;
        var arr = checkedWidgitIds.split(',');

        var newPanels = $.map(arr, function(chk) {
            return (function(val) {
                var widget = null;
                for (var i = 0; i < widgetList.length; i++) {
                    if (val === widgetList[i].WidgetId) {
                        widget = widgetList[i];
                    }
                }
                return widget;
            })(chk);
        });

        panels = [];
        for (var i = 0; i < newPanels.length; i++) {
            panels.push({
                column: i%2,
                id: newPanels[i].WidgetId,
                title: newPanels[i].WidgetTitle,
                showCollapseButton: newPanels[i].WidgetShowCloseButton,
                body: "#"+newPanels[i].WidgetBody,
                height: newPanels[i].WidgetHeight,
                url: newPanels[i].RenderUrl
            });
        };
        portal.setPanels(panels,"restart");
    }

    function SaveWidget() {

        var cookie = eval('(' + getCookie('@ViewData["cookieId"]') + ')');
        if (cookie == null || cookie.Widgets == null) return;

        var winPanels = portal.getPanels();
        var currentWidgetArr = [];

        $.each(winPanels, function(i, item) {
            var widgetItem = (function(val) {
                var widget = null;
                for (var i = 0; i < widgetList.length; i++) {
                    if (val === widgetList[i].WidgetId) {
                        widget = widgetList[i];
                    }
                }
                return widget;
            })(item.id);
            widgetItem.Order = i;
            widgetItem.WidgetColumn = $('#' + item.id).parent("td").attr("id");
            currentWidgetArr.push(widgetItem);
        });

        cookie.Widgets = currentWidgetArr;
        delCookie('@ViewData["cookieId"]');
        setCookie('@ViewData["cookieId"]', JSON.stringify(cookie), 365);

        alert("保存成功！");
    }

    function SaveWidgetNew() {
        //var cookie = eval('(' + getCookie('@ViewData["cookieId"]') + ')');
        //if (cookie == null || cookie.Widgets == null) return;

        var winPanels = portal.getPanels();
        var currentWidgetArr = [];

        $.each(winPanels, function(i, item) {
            var widgetItem = (function(val) {
                var widget = null;
                for (var i = 0; i < widgetList.length; i++) {
                    if (val === widgetList[i].WidgetId) {
                        widget = widgetList[i];
                    }
                }
                return widget;
            })(item.id);
            widgetItem.Order = i;
            widgetItem.WidgetColumn = $('#' + item.id).parent("td").attr("id");
            currentWidgetArr.push(widgetItem);
        });
       
        var widgetsJson = JSON.stringify(currentWidgetArr);
        var cLayout = JSON.stringify(colLayout);

        $.newPOST("SaveStartConfig",
            { widgetsJson: widgetsJson,colLayout:cLayout },
            function(data) {
                if (data == "True") {
                    alert("保存成功！");
                } else {
                    alert("保存失败！");
                }
            });
    }

    $.regButton({
        text: "保存",
        noSubmit: SaveWidgetNew
    });

    
    //显示设置窗体
    $.regButton({
        id: "HomeSetting",
        noSubmit: function () {
            mini.open({
                url: "@Url.Action("HomeSetting")",
                title: "布局设置",
                width: 400,
                height: 400,
                allowResize: true,
                onload: function () {
                    //获取子窗体对象
                    var iframe = this.getIFrameEl();
                    iframe.contentWindow.setPortalLayout=setPortalLayout;
                }
            });
        }
    });

    //
    function setPortalLayout(colv)
    {
        portal.set({
            columns: colv
        });
        colLayout=colv;
        //debugger;
        portal.panels=[];

        var cblwidgit = mini.get('#cblwidgit')
        cblwidgit.setValue("");
        alert("布局已经重置请重新添加窗体!");

        //portal.setPanels(panels);
    }
</script>
