<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jurassic.So.Infrastructure</name>
    </assembly>
    <members>
        <member name="T:Jurassic.PKS.Service.DataPageUnit">
            <summary>数据分页单位</summary>
        </member>
        <member name="F:Jurassic.PKS.Service.DataPageUnit.None">
            <summary>无</summary>
        </member>
        <member name="F:Jurassic.PKS.Service.DataPageUnit.Page">
            <summary>页数</summary>
        </member>
        <member name="F:Jurassic.PKS.Service.DataPageUnit.Row">
            <summary>行数</summary>
        </member>
        <member name="T:Jurassic.PKS.WebAPI.Submission.ApiWrappedSearchService">
            <summary>API包装搜索服务</summary>
        </member>
        <member name="M:Jurassic.PKS.WebAPI.Submission.ApiWrappedSearchService.#cctor">
            <summary>构造函数</summary>
        </member>
        <member name="M:Jurassic.PKS.WebAPI.Submission.ApiWrappedSearchService.#ctor(System.String)">
            <summary>构造函数</summary>
        </member>
        <member name="P:Jurassic.PKS.WebAPI.Submission.ApiWrappedSearchService.HttpClient">
            <summary>Http客户端包装器</summary>
        </member>
        <member name="P:Jurassic.PKS.WebAPI.Submission.ApiWrappedSearchService.ServiceUrl">
            <summary>服务URL</summary>
        </member>
        <member name="P:Jurassic.PKS.WebAPI.Submission.ApiWrappedSearchService.Url_GetCapabilities">
            <summary>获得服务能力信息URL</summary>
        </member>
        <member name="M:Jurassic.PKS.WebAPI.Submission.ApiWrappedSearchService.GetCapabilities">
            <summary>获得服务能力信息</summary>
        </member>
        <member name="M:Jurassic.PKS.WebAPI.Submission.ApiWrappedSearchService.GetCapabilitiesAsync">
            <summary>获得服务能力信息</summary>
        </member>
        <member name="P:Jurassic.PKS.WebAPI.Submission.ApiWrappedSearchService.Url_GetMetadataDefinition">
            <summary>获得元数据标签定义</summary>
        </member>
        <member name="M:Jurassic.PKS.WebAPI.Submission.ApiWrappedSearchService.GetMetadataDefinition">
            <summary>获得元数据标签定义</summary>
        </member>
        <member name="M:Jurassic.PKS.WebAPI.Submission.ApiWrappedSearchService.GetMetadataDefinitionAsync">
            <summary>获得元数据标签定义</summary>
        </member>
        <member name="T:Jurassic.PKS.WebAPI.Submission.ApiWrappedSubmissionService">
            <summary>API包装提交服务</summary>
        </member>
        <member name="M:Jurassic.PKS.WebAPI.Submission.ApiWrappedSubmissionService.#cctor">
            <summary>构造函数</summary>
        </member>
        <member name="M:Jurassic.PKS.WebAPI.Submission.ApiWrappedSubmissionService.#ctor(System.String)">
            <summary>构造函数</summary>
        </member>
        <member name="P:Jurassic.PKS.WebAPI.Submission.ApiWrappedSubmissionService.HttpClient">
            <summary>Http客户端包装器</summary>
        </member>
        <member name="P:Jurassic.PKS.WebAPI.Submission.ApiWrappedSubmissionService.ServiceUrl">
            <summary>服务URL</summary>
        </member>
        <member name="P:Jurassic.PKS.WebAPI.Submission.ApiWrappedSubmissionService.Url_GetCapabilities">
            <summary>获得服务能力信息URL</summary>
        </member>
        <member name="M:Jurassic.PKS.WebAPI.Submission.ApiWrappedSubmissionService.GetCapabilities">
            <summary>获得服务能力信息</summary>
        </member>
        <member name="M:Jurassic.PKS.WebAPI.Submission.ApiWrappedSubmissionService.GetCapabilitiesAsync">
            <summary>获得服务能力信息</summary>
        </member>
        <member name="P:Jurassic.PKS.WebAPI.Submission.ApiWrappedSubmissionService.Url_Upload">
            <summary>上传一个成果文件URL</summary>
        </member>
        <member name="M:Jurassic.PKS.WebAPI.Submission.ApiWrappedSubmissionService.Upload(System.String)">
            <summary>上传一个成果文件</summary>
        </member>
        <member name="M:Jurassic.PKS.WebAPI.Submission.ApiWrappedSubmissionService.UploadAsync(System.String)">
            <summary>上传一个成果文件</summary>
        </member>
        <member name="P:Jurassic.PKS.WebAPI.Submission.ApiWrappedSubmissionService.Url_Submit">
            <summary>提交成果URL</summary>
        </member>
        <member name="M:Jurassic.PKS.WebAPI.Submission.ApiWrappedSubmissionService.Submit(Jurassic.PKS.WebAPI.Submission.SubmissionInfoRequest)">
            <summary>提交成果</summary>
        </member>
        <member name="M:Jurassic.PKS.WebAPI.Submission.ApiWrappedSubmissionService.SubmitAsync(Jurassic.PKS.WebAPI.Submission.SubmissionInfoRequest)">
            <summary>提交成果</summary>
        </member>
        <member name="T:Jurassic.So.Business.JsonMetadata">
            <summary>JSON元数据</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.#ctor">
            <summary>构造函数</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>构造函数</summary>
        </member>
        <member name="T:Jurassic.So.Business.JsonMetadata.MetadataPath">
            <summary>元数据路径</summary>
        </member>
        <member name="P:Jurassic.So.Business.JsonMetadata.MetadataPath.Path">
            <summary>路径</summary>
        </member>
        <member name="P:Jurassic.So.Business.JsonMetadata.MetadataPath.Key">
            <summary>键</summary>
        </member>
        <member name="P:Jurassic.So.Business.JsonMetadata.MetadataPath.TokenType">
            <summary>标记类型</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.MetadataPath.ToString">
            <summary>生成JSON串</summary>
        </member>
        <member name="F:Jurassic.So.Business.JsonMetadata.s_SyncRoot">
            <summary>同步根</summary>
        </member>
        <member name="F:Jurassic.So.Business.JsonMetadata.s_MetadataPathMappers">
            <summary>元数据路径映射</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.InitMetadataPathMappers(Jurassic.PKS.Service.KMDConfiguration)">
            <summary>初始化元数据路径映射</summary>
        </member>
        <member name="P:Jurassic.So.Business.JsonMetadata.s_MetadataDefinitions">
            <summary>元数据定义</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.InitMetadataDefinitions(Jurassic.PKS.Service.KMDConfiguration)">
            <summary>初始化元数据定义</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.GetDefinition(System.String)">
            <summary>获得某个元数据定义</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.GetMetadataPathMapper(System.String)">
            <summary>获得元数据路径映射</summary>
        </member>
        <member name="P:Jurassic.So.Business.JsonMetadata.IIId">
            <summary>索引数据ID</summary>
        </member>
        <member name="P:Jurassic.So.Business.JsonMetadata.IndexedDate">
            <summary>索引数据日期</summary>
        </member>
        <member name="P:Jurassic.So.Business.JsonMetadata.Url">
            <summary>适配器URL</summary>
        </member>
        <member name="P:Jurassic.So.Business.JsonMetadata.Title">
            <summary>正式标题</summary>
        </member>
        <member name="P:Jurassic.So.Business.JsonMetadata.Description">
            <summary>描述</summary>
        </member>
        <member name="P:Jurassic.So.Business.JsonMetadata.Creator">
            <summary>创建者</summary>
        </member>
        <member name="P:Jurassic.So.Business.JsonMetadata.CreatedDate">
            <summary>创建日期</summary>
        </member>
        <member name="P:Jurassic.So.Business.JsonMetadata.Thumbnail">
            <summary>缩略图</summary>
        </member>
        <member name="P:Jurassic.So.Business.JsonMetadata.Fulltext">
            <summary>全文</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.Jurassic#PKS#Service#IMetadata#GetValue(System.String)">
            <summary>获得某个元数据值</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.ToIndex">
            <summary>转换为索引信息</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.ToString">
            <summary>生成JSON串</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.GetValue(System.String,System.Boolean)">
            <summary>获得某个元数据值</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.ValueToString(System.Object)">
            <summary>转换为字符串</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.ValueToDate(System.Object)">
            <summary>转换为日期</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.ValueToImage(System.Object)">
            <summary>转换为图片</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.SetValue(System.String,System.Object)">
            <summary>设置某个元数据值</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.SetValueByPath(Jurassic.PKS.Service.MetadataDefinition,System.String,System.Object)">
            <summary>设置某个元数据值</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.AddArray(Newtonsoft.Json.Linq.JContainer,System.String,System.Object)">
            <summary>加入数组</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.ValueFromDate(System.Object)">
            <summary>从日期转换</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.RemoveValueByPath(Jurassic.PKS.Service.MetadataDefinition,System.String)">
            <summary>根据路径删除值</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.JsonTo``1(System.String)">
            <summary>使用自定义序列化器</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.LoadMyself(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.LoadMyself(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.JsonGet(Newtonsoft.Json.Linq.JToken,System.String)">
            <summary>获得子成员</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.JsonCreate(Newtonsoft.Json.Linq.JTokenType)">
            <summary>创建容器</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.JsonAdd(Newtonsoft.Json.Linq.JContainer,System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>加入</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.JsonRemove(Newtonsoft.Json.Linq.JToken,System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>删除</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadata.ExistsInArray(Newtonsoft.Json.Linq.JArray,System.String)">
            <summary>创建容器</summary>
        </member>
        <member name="T:Jurassic.So.Business.JsonMetadataConverter">
            <summary>JSON元数据自定义格式化器</summary>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadataConverter.Create(System.Type)">
            <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:Jurassic.So.Business.JsonMetadataConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Jurassic.So.Business.MetadataExceptionCodes">
            <summary>元数据异常代码</summary>
        </member>
        <member name="F:Jurassic.So.Business.MetadataExceptionCodes.UrlNotExist">
            <summary>Url不存在</summary>
        </member>
        <member name="T:Jurassic.So.Business.DataFormatUtil">
            <summary>数据格式工具</summary>
        </member>
        <member name="M:Jurassic.So.Business.DataFormatUtil.#cctor">
            <summary>获得数据格式的MIME类型</summary>
        </member>
        <member name="P:Jurassic.So.Business.DataFormatUtil.s_FormatMappings">
            <summary>数据格式映射表</summary>
        </member>
        <member name="P:Jurassic.So.Business.DataFormatUtil.s_MimeTypeMappings">
            <summary>MimeType映射表</summary>
        </member>
        <member name="P:Jurassic.So.Business.DataFormatUtil.s_UnknownMimeTypeAttribute">
            <summary>未知MimeType</summary>
        </member>
        <member name="P:Jurassic.So.Business.DataFormatUtil.s_MimeTypeValueMappings">
            <summary>MimeType值映射表</summary>
        </member>
        <member name="M:Jurassic.So.Business.DataFormatUtil.ToDataFormat(System.String)">
            <summary>获得数据格式</summary>
        </member>
        <member name="M:Jurassic.So.Business.DataFormatUtil.ToDataFormatFromMime(System.String)">
            <summary>根据MIME类型获得数据格式</summary>
        </member>
        <member name="M:Jurassic.So.Business.DataFormatUtil.ToMimeType(Jurassic.PKS.Service.DataFormat)">
            <summary>获得数据格式的MIME类型</summary>
        </member>
        <member name="M:Jurassic.So.Business.DataFormatUtil.ToMimeTypeValue(Jurassic.PKS.Service.DataFormat)">
            <summary>获得数据格式的MIME类型</summary>
        </member>
        <member name="M:Jurassic.So.Business.DataFormatUtil.IsStreamOutput(System.String)">
            <summary>MIME类型是否流输出</summary>
        </member>
        <member name="T:Jurassic.So.Business.MetadataNameElement">
            <summary>元数据名称元素</summary>
        </member>
        <member name="P:Jurassic.So.Business.MetadataNameElement.Type">
            <summary>类型</summary>
        </member>
        <member name="P:Jurassic.So.Business.MetadataNameElement.Name">
            <summary>名称</summary>
        </member>
        <member name="T:Jurassic.So.Business.MetadataTextElement">
            <summary>元数据文本元素</summary>
        </member>
        <member name="P:Jurassic.So.Business.MetadataTextElement.Type">
            <summary>类型</summary>
        </member>
        <member name="P:Jurassic.So.Business.MetadataTextElement.Text">
            <summary>文本</summary>
        </member>
        <member name="T:Jurassic.So.Business.MetadataValueElement`1">
            <summary>元数据值元素</summary>
        </member>
        <member name="P:Jurassic.So.Business.MetadataValueElement`1.Type">
            <summary>类型</summary>
        </member>
        <member name="P:Jurassic.So.Business.MetadataValueElement`1.Value">
            <summary>值</summary>
        </member>
        <member name="T:Jurassic.So.Business.MetadataSource">
            <summary>元数据源信息</summary>
        </member>
        <member name="P:Jurassic.So.Business.MetadataSource.Url">
            <summary>适配器地址</summary>
        </member>
        <member name="P:Jurassic.So.Business.MetadataSource.DataSourceName">
            <summary>数据源名称</summary>
        </member>
        <member name="P:Jurassic.So.Business.MetadataSource.DataSourceType">
            <summary>数据源类型</summary>
        </member>
        <member name="P:Jurassic.So.Business.MetadataSource.Format">
            <summary>格式</summary>
        </member>
        <member name="P:Jurassic.So.Business.MetadataSource.Media">
            <summary>存储</summary>
        </member>
        <member name="T:Jurassic.So.Business.IMetadataDefinitionRepository">
            <summary>元数据定义数据访问接口</summary>
        </member>
        <member name="M:Jurassic.So.Business.IMetadataDefinitionRepository.GetAll">
            <summary>获得全部元数据定义</summary>
        </member>
        <member name="T:Jurassic.So.Business.IMetadataRepository">
            <summary>元数据数据访问接口</summary>
        </member>
        <member name="M:Jurassic.So.Business.IMetadataRepository.SaveAsync(Jurassic.PKS.Service.MetadataCollection)">
            <summary>保存</summary>
            <param name="metadatas">元数据集合</param>
            <returns>返回受影响的元数据IIId集合</returns>
        </member>
        <member name="M:Jurassic.So.Business.IMetadataRepository.UpdateAsync(Jurassic.PKS.Service.MetadataCollection)">
            <summary>更新</summary>
            <param name="metadatas">元数据集合</param>
            <returns>返回受影响的元数据IIId集合</returns>
        </member>
        <member name="M:Jurassic.So.Business.IMetadataRepository.DeleteAsync(Jurassic.PKS.Service.MetadataCollection)">
            <summary>删除</summary>
            <param name="metadatas">元数据集合</param>
            <returns>返回受影响的元数据IIId集合</returns>
        </member>
        <member name="T:Jurassic.So.Business.HttpClientWrapper">
            <summary>Http客户端包装器</summary>
            <remarks>
            如果不指定应答结果，
                结果有三种，一种是流，一种是字符串，最后一种是HttpResponseMessage(无法解析ContentType)
            如果指定应答结果，将尝试转换为应答结果，如果无法转换将生成<see cref="T:System.InvalidOperationException"/>异常
            </remarks>
        </member>
        <member name="M:Jurassic.So.Business.HttpClientWrapper.#ctor">
            <summary>构造函数</summary>
        </member>
        <member name="M:Jurassic.So.Business.HttpClientWrapper.EnsureSuccess(System.Net.Http.HttpResponseMessage)">
            <summary>检查是否成功</summary>
        </member>
        <member name="M:Jurassic.So.Business.HttpClientWrapper.InitReadHandlers(System.Collections.Generic.Dictionary{System.Type,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task{System.Object}}})">
            <summary>初始化读内容处理器字典</summary>
        </member>
        <member name="M:Jurassic.So.Business.HttpClientWrapper.ReadAsDataResultAsync(System.Net.Http.HttpResponseMessage)">
            <summary>读内容处理器_返回DataResult</summary>
        </member>
        <member name="T:Jurassic.So.Business.MetadataUtil">
            <summary>元数据工具</summary>
        </member>
        <member name="M:Jurassic.So.Business.MetadataUtil.ComputeIIId(Jurassic.PKS.Service.IMetadata)">
            <summary>计算元数据的IIId</summary>
        </member>
        <member name="M:Jurassic.So.Business.MetadataUtil.ToMetadata(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>转换字典到元数据</summary>
        </member>
        <member name="M:Jurassic.So.Business.MetadataUtil.JsonToMetadata(Newtonsoft.Json.Linq.JObject)">
            <summary>转换字典到元数据</summary>
        </member>
        <member name="M:Jurassic.So.Business.MetadataUtil.ToMetadataList(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}})">
            <summary>转换字典集合到元数据集合</summary>
        </member>
        <member name="M:Jurassic.So.Business.MetadataUtil.JsonToMetadataList(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
            <summary>转换JObject集合到元数据集合</summary>
        </member>
        <member name="M:Jurassic.So.Business.MetadataUtil.KMDJsonToMetadataList(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
            <summary>
            转换JObject集合到元数据集合
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Business.MetadataUtil.ToMetadataList(System.Collections.Generic.List{Jurassic.PKS.Service.KMD})">
            <summary>
            KMD list 转化为元数据集合
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:Jurassic.So.Business.Metadata">
            <summary>元数据</summary>
        </member>
        <member name="M:Jurassic.So.Business.Metadata.#ctor">
            <summary>构造函数</summary>
        </member>
        <member name="M:Jurassic.So.Business.Metadata.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>构造函数</summary>
        </member>
        <member name="M:Jurassic.So.Business.Metadata.#ctor(System.String)">
            <summary>构造函数</summary>
        </member>
        <member name="M:Jurassic.So.Business.Metadata.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>构造函数(用序列化数据初始化)</summary>
        </member>
        <member name="P:Jurassic.So.Business.Metadata.IIId">
            <summary>索引数据ID</summary>
        </member>
        <member name="P:Jurassic.So.Business.Metadata.IndexedDate">
            <summary>索引数据日期</summary>
        </member>
        <member name="P:Jurassic.So.Business.Metadata.Url">
            <summary>适配器URL</summary>
        </member>
        <member name="P:Jurassic.So.Business.Metadata.Title">
            <summary>正式标题</summary>
        </member>
        <member name="P:Jurassic.So.Business.Metadata.Description">
            <summary>描述</summary>
        </member>
        <member name="P:Jurassic.So.Business.Metadata.Creator">
            <summary>创建者</summary>
        </member>
        <member name="P:Jurassic.So.Business.Metadata.CreatedDate">
            <summary>创建日期</summary>
        </member>
        <member name="P:Jurassic.So.Business.Metadata.Thumbnail">
            <summary>缩略图</summary>
        </member>
        <member name="P:Jurassic.So.Business.Metadata.Fulltext">
            <summary>全文</summary>
        </member>
        <member name="M:Jurassic.So.Business.Metadata.GetValue(System.String)">
            <summary>获得某个元数据值</summary>
        </member>
        <member name="M:Jurassic.So.Business.Metadata.ToIndex">
            <summary>转换为索引信息</summary>
        </member>
        <member name="M:Jurassic.So.Business.Metadata.ToString">
            <summary>生成JSON串</summary>
        </member>
        <member name="M:Jurassic.So.Business.Metadata.GetValueInternal(System.String[])">
            <summary>获得某个元数据值</summary>
        </member>
        <member name="M:Jurassic.So.Business.Metadata.SetValueInternal(System.Object,System.String[])">
            <summary>设置某个元数据值</summary>
        </member>
        <member name="M:Jurassic.So.Business.Metadata.AddNonNull(System.String,System.Object)">
            <summary>加入非空值</summary>
        </member>
        <member name="M:Jurassic.So.Business.Metadata.AddNonNullOrEmpty(System.String,System.Object[])">
            <summary>加入非空值</summary>
        </member>
        <member name="M:Jurassic.So.Business.Metadata.AddNonNullOrEmpty(System.String,System.String)">
            <summary>加入非空值</summary>
        </member>
        <member name="M:Jurassic.So.Business.Metadata.AddNonNullOrEmpty(System.String,System.String[])">
            <summary>加入非空值</summary>
        </member>
        <member name="M:Jurassic.So.Business.Metadata.RemoveValue(System.String[])">
            <summary>获得某个元数据值</summary>
        </member>
        <member name="M:Jurassic.So.Business.Metadata.MergeValue(Jurassic.So.Business.Metadata)">
            <summary>合并值</summary>
        </member>
        <member name="M:Jurassic.So.Business.Metadata.MergeDictionary(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>合并字典值</summary>
        </member>
        <member name="M:Jurassic.So.Business.Metadata.MergeList(System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Object})">
            <summary>合并集合值</summary>
        </member>
        <member name="T:Jurassic.So.Business.MetadataConsts">
            <summary>元数据常量</summary>
        </member>
        <member name="F:Jurassic.So.Business.MetadataConsts.IndexQuality">
            <summary>索引质量，为百分比格式，默认为"100%"</summary>
        </member>
        <member name="F:Jurassic.So.Business.MetadataConsts.IIId">
            <summary>索引ID</summary>
        </member>
        <member name="F:Jurassic.So.Business.MetadataConsts.IndexedDate">
            <summary>索引日期</summary>
        </member>
        <member name="F:Jurassic.So.Business.MetadataConsts.SourceUrl">
            <summary>URL</summary>
        </member>
        <member name="F:Jurassic.So.Business.MetadataConsts.SourceType">
            <summary>数据源类型</summary>
        </member>
        <member name="F:Jurassic.So.Business.MetadataConsts.SourceName">
            <summary>数据源名称</summary>
        </member>
        <member name="F:Jurassic.So.Business.MetadataConsts.SourceFormat">
            <summary>数据源格式</summary>
        </member>
        <member name="F:Jurassic.So.Business.MetadataConsts.Thumbnail">
            <summary>缩略图</summary>
        </member>
        <member name="F:Jurassic.So.Business.MetadataConsts.Fulltext">
            <summary>全文</summary>
        </member>
        <member name="F:Jurassic.So.Business.MetadataConsts.FormalTitle">
            <summary>标题</summary>
        </member>
        <member name="F:Jurassic.So.Business.MetadataConsts.Author">
            <summary>作者</summary>
        </member>
        <member name="F:Jurassic.So.Business.MetadataConsts.Description">
            <summary>描述</summary>
        </member>
        <member name="F:Jurassic.So.Business.MetadataConsts.CreatedDate">
            <summary>创建日期</summary>
        </member>
        <member name="F:Jurassic.So.Business.MetadataConsts.ProductType">
            <summary>成果类型</summary>
        </member>
        <member name="M:Jurassic.So.Data.IRepository`1.Add(`0,System.Boolean)">
            <summary>
            增加
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Jurassic.So.Data.IRepository`1.Attach(`0,System.Object[])">
            <summary>附加实体</summary>
        </member>
        <member name="M:Jurassic.So.Data.IRepository`1.Update(`0,System.Boolean)">
            <summary>
            更新
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Jurassic.So.Data.IRepository`1.Delete(`0,System.Boolean)">
            <summary>
            删除
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Jurassic.So.Data.IRepository`1.DeleteList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Jurassic.So.Data.IRepository`1.DeleteList(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            删除
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Jurassic.So.Data.IRepository`1.Exist(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            判断是否存在
            </summary>
            <param name="whereExpr"></param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Data.IRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取记录数
            </summary>
            <param name="whereExpr"></param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Data.IRepository`1.GetAll">
            <summary>
            获取全部
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Data.IRepository`1.GetQuery">
            <summary>
            获取全部
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Data.IRepository`1.Find(System.Object)">
            <summary>
            查找实体对象
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Data.IRepository`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体对象
            </summary>
            <param name="whereExpr"></param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Data.IRepository`1.FindList``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32)">
            <summary>
            查找实体对象列表
            </summary>
            <param name="whereExpr"></param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Data.IRepository`1.FindList``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32)">
            <summary>
            查找实体对象列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="whereExpr"></param>
            <param name="selectExpr"></param>
            <param name="orderbyExpr"></param>
            <param name="orderDirection"></param>
            <param name="returnCount"></param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Data.IRepository`1.FindListByPage``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页查找实体对象列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="whereExpr"></param>
            <param name="selectExpr"></param>
            <param name="orderbyExpr"></param>
            <param name="orderDirection"></param>
            <param name="pageSize"></param>
            <param name="pageNo"></param>
            <param name="recordCount"></param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Data.IRepository`1.Submit">
            <summary>
            提交保存所有变更操作
            </summary>
        </member>
        <member name="T:Jurassic.So.Infrastructure.MongoUtil">
            <summary>Mongo工具</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoUtil.ToDictionary``1(MongoDB.Bson.BsonDocument)">
            <summary>Mongo文档转换为强类型字典</summary>
        </member>
        <member name="T:Jurassic.So.Infrastructure.MongoConsts">
            <summary>Mongo库常量</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.MongoConsts.Collection_MetaData">
            <summary>元数据表</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.MongoConsts.Collection_MetaDataDefinition">
            <summary>元数据定义表</summary>
        </member>
        <member name="T:Jurassic.So.Infrastructure.CacheUtil">
            <summary>缓存工具</summary>
        </member>
        <member name="P:Jurassic.So.Infrastructure.CacheUtil.Cache">
            <summary>缓存实例</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.CacheUtil.BuildRegionKey``1(System.String,System.String)">
            <summary>生成区域相关键</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.CacheUtil.BuildRegionKey(System.String,System.String,System.Type)">
            <summary>生成区域相关键</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.CacheUtil.Get``1(System.String)">
            <summary>获得实例</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.CacheUtil.GetOrCreate``1(System.String,System.Func{``0},System.TimeSpan)">
            <summary>获得或创建实例</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.CacheUtil.GetOrCreateSliding``1(System.String,System.Func{``0},System.TimeSpan)">
            <summary>获得或创建实例</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.CacheUtil.Add(System.String,System.Object,System.TimeSpan)">
            <summary>加入缓存</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.CacheUtil.AddSliding(System.String,System.String,System.Object,System.TimeSpan)">
            <summary>加入(滑动)</summary>
        </member>
        <member name="T:Jurassic.So.Infrastructure.AutoMapperUtil">
            <summary>自动映射工具</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.AutoMapperUtil.LoadConfig(System.String)">
            <summary>从配置文件加载</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.AutoMapperUtil.MapTo``1(System.Object)">
            <summary>映射到目标类型数据</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.AutoMapperUtil.MapTo``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>映射到目标类型数据集合</summary>
        </member>
        <member name="T:Jurassic.So.Infrastructure.CommandType">
            <summary>命令类型</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.CommandType.Insert">
            <summary>插入</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.CommandType.Update">
            <summary>更新</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.CommandType.Delete">
            <summary>删除</summary>
        </member>
        <member name="T:Jurassic.So.Infrastructure.ExceptionCodes">
            <summary>异常编码</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.ExceptionCodes.MissingParameterValue">
            <summary>缺少参数值</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.ExceptionCodes.ParameterParsingFailed">
            <summary>参数解析失败</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.ExceptionCodes.InvalidEnumValue">
            <summary>无效的枚举值</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.ExceptionCodes.OperationUnauthorized">
            <summary>操作未授权</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.ExceptionCodes.OperationProcessingFailed">
            <summary>操作处理失败</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.ExceptionCodes.InvalidPagerParameter">
            <summary>参数不合法</summary>
        </member>
        <member name="T:Jurassic.So.Infrastructure.JoinOperator">
            <summary>连接运算符</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.JoinOperator.Inner">
            <summary>内连接</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.JoinOperator.Left">
            <summary>左连接</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.JoinOperator.Right">
            <summary>右连接</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.JoinOperator.Outer">
            <summary>外连接</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.JoinOperator.Cross">
            <summary>交叉</summary>
        </member>
        <member name="T:Jurassic.So.Infrastructure.IocContext">
            <summary>IOC容器上下文</summary>
            <remarks>配置文件中容器名称为container</remarks>
        </member>
        <member name="F:Jurassic.So.Infrastructure.IocContext.Container">
            <summary>Unity容器</summary>
        </member>
        <member name="P:Jurassic.So.Infrastructure.IocContext.Instance">
            <summary>Unity容器实例</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Logging.ExtExceptions.ExtApplicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor to de-serialize data
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Jurassic.So.Infrastructure.Logging.ExtExceptions.ExtBaseException.RichMessage">
            <summary>
            Rich message
            </summary>
        </member>
        <member name="P:Jurassic.So.Infrastructure.Logging.ExtExceptions.ExtBaseException.StackTrace">
            <summary>
            attached innerException stacktrace information 
            </summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Logging.ExtExceptions.ExtSystemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor to de-serialize data
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Logging.ExtExceptions.ExtValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor to de-serialize data
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Logging.Logger.LogRpRq(System.Object,System.Object,System.String)">
            <summary>
            同时记录请求和返回结果
            addby:shiyaru
            date:20151112
            </summary>
            <param name="response"></param>
            <param name="request"></param>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Logging.Message.MessageData.#ctor(Jurassic.So.Infrastructure.Logging.Message.MessageKey)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Logging.Message.MessageData.GetMessageCode">
            <summary>
            Get Message Code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Logging.Message.MessageData.GetMessageType">
            <summary>
            Get abbreviate of Message Type 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Logging.Message.MessageKey.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Logging.Message.MessageKey.#ctor(Jurassic.So.Infrastructure.Logging.Message.MessageType,System.String)">
            <summary>
            Two-parm constructor
            </summary>
            <param name="type">Message type</param>
            <param name="code">Message code</param>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Logging.Message.MessageKey.GetHashCode">
            <summary>
            GetHashCode() override.
            </summary>
            <returns>Hash code based on object attributes</returns>
        </member>
        <member name="T:Jurassic.So.Infrastructure.Logging.Message.MessageResources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Jurassic.So.Infrastructure.Logging.Message.MessageResources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Jurassic.So.Infrastructure.Logging.Message.MessageResources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Jurassic.So.Infrastructure.Logging.Message.MessageResources.Messages">
            <summary>
              查找类似 &lt;Messages xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;
             &lt;!-- Debug 000--&gt;
             &lt;MessagesByType typeCode=&quot;1&quot; typeName=&quot;Debug Messages&quot; annotation=&quot;Code range shall be 000&quot;&gt;
               &lt;Message id=&quot;000&quot;&gt;
                 &lt;Description&gt;{0}&lt;/Description&gt;
                 &lt;Variables&gt;
                   &lt;Variable formatIndex=&quot;0&quot;&gt;Debug message&lt;/Variable&gt;
                 &lt;/Variables&gt;
               &lt;/Message&gt;
             &lt;/MessagesByType&gt;
             &lt;!-- Info 001~099--&gt;
             &lt;MessagesByType typeCode=&quot;2&quot; typeName=&quot;Info Messages&quot; annota [字符串的其余部分被截断]&quot;; 的本地化字符串。
            </summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Logging.Message.UcpaassMessage.MD5Encrypt(System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="source">原内容</param>
            <returns>加密后内容</returns>
        </member>
        <member name="T:Jurassic.So.Infrastructure.ExceptionExtension">
            <summary>异常扩展</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.ExceptionExtension.Code">
            <summary>异常代码</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.ExceptionExtension.Details">
            <summary>异常明细</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.ExceptionExtension.HttpResponseStatusCode">
            <summary>异常代码</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.ExceptionExtension.HttpResponseReasonPhrase">
            <summary>异常明细</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.ExceptionExtension.Throw``1(System.Exception,``0,System.String)">
            <summary>抛出符合规范的异常</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.ExceptionExtension.Throw(System.Net.Http.HttpRequestException,System.Net.Http.HttpResponseMessage)">
            <summary>抛出符合规范的异常</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.ExceptionExtension.ThrowUserFriendly``1(``0,System.String,System.String)">
            <summary>抛出用户友好异常</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.ExceptionExtension.ToModel(System.Exception)">
            <summary>转换为异常数据</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.ExceptionExtension.ToWebModel(System.Exception)">
            <summary>转换为WEB异常数据</summary>
        </member>
        <member name="T:Jurassic.So.Infrastructure.ExceptionModel">
            <summary>异常数据</summary>
        </member>
        <member name="P:Jurassic.So.Infrastructure.ExceptionModel.Code">
            <summary>异常编码</summary>
        </member>
        <member name="P:Jurassic.So.Infrastructure.ExceptionModel.Message">
            <summary>异常信息(面向用户)</summary>
        </member>
        <member name="P:Jurassic.So.Infrastructure.ExceptionModel.Details">
            <summary>异常明细(面向调用者)</summary>
        </member>
        <member name="T:Jurassic.So.Infrastructure.UserFriendlyException">
            <summary>用户友好异常</summary>
            <remarks>可显示给用户的异常</remarks>
        </member>
        <member name="M:Jurassic.So.Infrastructure.UserFriendlyException.#ctor">
            <summary>构造函数</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.UserFriendlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>构造函数</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.UserFriendlyException.#ctor(System.String,System.String,System.String)">
            <summary>构造函数</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.UserFriendlyException.#ctor(System.Exception,System.String,System.String,System.String)">
            <summary>构造函数</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.UserFriendlyException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>构造函数</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.UserFriendlyException.#ctor(System.String,System.String,System.Exception)">
            <summary>构造函数</summary>
        </member>
        <member name="P:Jurassic.So.Infrastructure.UserFriendlyException.Code">
            <summary>异常编码</summary>
        </member>
        <member name="P:Jurassic.So.Infrastructure.UserFriendlyException.FriendlyMessage">
            <summary>给用户参考的异常信息</summary>
        </member>
        <member name="T:Jurassic.So.Infrastructure.HttpClientWrapperBase">
            <summary>Http客户端包装器基类</summary>
            <remarks>
            如果不指定应答结果，
                结果有三种，一种是流，一种是字符串，最后一种是HttpResponseMessage(无法解析ContentType)
            如果指定应答结果，将尝试转换为应答结果，如果无法转换将生成<see cref="T:System.InvalidOperationException"/>异常
            </remarks>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.#ctor">
            <summary>构造函数</summary>
        </member>
        <member name="P:Jurassic.So.Infrastructure.HttpClientWrapperBase.Instance">
            <summary>Http客户端</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.DisposeInternal(System.Boolean)">
            <summary>释放资源内部方法</summary>
        </member>
        <member name="P:Jurassic.So.Infrastructure.HttpClientWrapperBase.ReadContentHandlers">
            <summary>读内容处理器字典</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.InitReadHandlers(System.Collections.Generic.Dictionary{System.Type,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task{System.Object}}})">
            <summary>初始化读内容处理器字典</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.ReadAsSelfAsync(System.Net.Http.HttpResponseMessage)">
            <summary>读内容处理器_返回应答对象</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.ReadAsStreamAsync(System.Net.Http.HttpResponseMessage)">
            <summary>读内容处理器_返回流对象</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.ReadAsByteArrayAsync(System.Net.Http.HttpResponseMessage)">
            <summary>读内容处理器_返回字节数组</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.ReadAsStringAsync(System.Net.Http.HttpResponseMessage)">
            <summary>读内容处理器_返回字符串</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.ReadAsObjectAsync``1(System.Net.Http.HttpResponseMessage)">
            <summary>读内容处理器</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.ReadAsJsonAsync``1(System.Net.Http.HttpResponseMessage)">
            <summary>读内容处理器_返回JSON强类型对象</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.EnsureSuccess(System.Net.Http.HttpResponseMessage)">
            <summary>检查是否成功</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.IsStreamResponse(System.Net.Http.HttpResponseMessage)">
            <summary>是否流应答</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.ReadContentAsync(System.Net.Http.HttpResponseMessage)">
            <summary>读取应答数据</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.ReadContentAsync``1(System.Net.Http.HttpResponseMessage)">
            <summary>读取应答数据</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.SetAuthorization(System.String)">
            <summary>设置授权</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.SetAuthorization(System.String,System.Boolean)">
            <summary>设置授权</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.Get(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>Get请求</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.GetAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>Get请求</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.Get``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>Get请求</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.GetAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>Get请求</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.BuildRequestContent(System.String)">
            <summary>生成请求内容</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.SerializableContent(System.Object)">
            <summary>序列化内容</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.Post(System.String,System.String,System.String)">
            <summary>Post请求</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.PostObject(System.String,System.Object,System.String)">
            <summary>Post请求</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.PostAsync(System.String,System.String,System.String)">
            <summary>Post请求</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.PostObjectAsync(System.String,System.Object,System.String)">
            <summary>Post请求</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.Post``1(System.String,System.String,System.String)">
            <summary>Post请求</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.PostObject``1(System.String,System.Object,System.String)">
            <summary>Post请求</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.PostAsync``1(System.String,System.String,System.String)">
            <summary>Post请求</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.PostObjectAsync``1(System.String,System.Object,System.String)">
            <summary>Post请求</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.BuildMultipartFormDataContent(System.String)">
            <summary>生成多部分内容</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.BuildFileContent(System.String)">
            <summary>生成文件内容</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.Upload(System.String,System.String)">
            <summary>上传文件</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.UploadAsync(System.String,System.String)">
            <summary>上传文件</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.Upload``1(System.String,System.String)">
            <summary>上传文件</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HttpClientWrapperBase.UploadAsync``1(System.String,System.String)">
            <summary>上传文件</summary>
        </member>
        <member name="T:Jurassic.So.Infrastructure.Util.PropertyComparerUtil`1">
            <summary>
            属性比较
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Util.PropertyComparerUtil`1.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="propertyName">属性名称</param>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Util.DictionaryUtil.SortByValue(System.Collections.Generic.Dictionary{System.String,System.Int32},System.Boolean)">
            <summary>
            Dictionary根据值排序
            </summary>
            <param name="dic"></param>
            <param name="isDesc">默认降序</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Util.DictionaryUtil.SortByValue(System.Collections.Generic.Dictionary{System.String,System.Nullable{System.Int64}},System.Boolean)">
            <summary>
            Dictionary根据值排序
            </summary>
            <param name="dic"></param>
            <param name="isDesc">默认降序</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Util.DictionaryUtil.SortByKey(System.Collections.Generic.Dictionary{System.String,System.Int32},System.Boolean)">
            <summary>
            Dictionary根据key排序
            </summary>
            <param name="dic"></param>
            <param name="isDesc">默认降序</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Util.WebRequestUtil.GetHttpClientStr(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Get调用API服务的通用方法，参数会被转换成Json参数。
            </summary>
            <param name="api">API服务路径</param>
            <param name="prams">调用参数，Key，Value形式包裹，简单支持string，int，Guid</param>
            <param name="token">授权验证信息</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Util.WebRequestUtil.PostHttpClientStr(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Post调用API服务的通用方法
            </summary>
            <param name="api">API服务路径</param>
            <param name="pramsKeyValue">调用参数，Key，Value形式包裹，复杂类型请使用Json格式的字符串</param>
            <param name="token">授权验证信息</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Util.WebRequestUtil.PostHttpClientStrByHttpContent(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Post调用API服务的通用方法，方法不会将参数转换成 Json，而直接使用。
            </summary>
            <param name="api">API服务路径</param>
            <param name="pramsKeyValue">调用参数，Key，Value形式包裹，简单支持string，int，Guid</param>
            <param name="token">授权验证信息</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Util.WebRequestUtil.PostHttpClientStr(System.String,System.String,System.String)">
            <summary>
            用JSON参数Post调用API服务的通用方法
            </summary>
            <param name="url">API服务路径</param>
            <param name="json">Json格式的参数</param>
            <param name="token">授权验证信息</param>
            <returns>API应答信息</returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Util.WebRequestUtil.PostJson(System.String,System.String,System.String)">
            <summary>
            用JSON参数Post调用API服务的通用方法
            </summary>
            <param name="url">API服务路径</param>
            <param name="json">Json格式的参数</param>
            <param name="token">授权验证信息</param>
            <returns>API应答信息</returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Util.WebRequestUtil.PostHttpClientStr(System.String,System.Net.Http.HttpContent,System.String)">
            <summary>
            Post调用API服务的通用方法
            </summary>
            <param name="api">API服务路径</param>
            <param name="pramsHttpContent">调用参数，HttpClient的标准参数</param>
            <param name="token">授权验证信息</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Util.WebRequestUtil.GetToken(System.String,System.String,System.String)">
            <summary>
            通过文件头信息传递账号与验证信息
            </summary>
            <param name="baseUrl">基础路径，域名</param>
            <param name="name">用户</param>
            <param name="key">授权</param>
            <returns></returns>
        </member>
        <member name="T:Jurassic.So.Infrastructure.DisposableObject">
            <summary>释放资源对象</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.DisposableObject.disposed">
            <summary>是否已释放</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.DisposableObject.Dispose">
            <summary>释放资源</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.DisposableObject.Dispose(System.Boolean)">
            <summary>释放资源</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.DisposableObject.DisposeInternal(System.Boolean)">
            <summary>释放资源内部方法</summary>
        </member>
        <member name="T:Jurassic.So.Infrastructure.CollectionUtil">
            <summary>集合工具</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.CollectionUtil.GetValueBy``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>根据键获得值，如果值不存在返回默认值</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.CollectionUtil.GetValueOrDefaultBy``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>根据键获得值，如果值不存在返回默认值</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.CollectionUtil.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>加入集合</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.CollectionUtil.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>是null或空</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.CollectionUtil.ForEach``1(System.Collections.Generic.ICollection{``0},System.Action{``0})">
            <summary>迭代集合</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.CollectionUtil.TryDispose``1(System.Collections.Generic.ICollection{``0})">
            <summary>检查并释放</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.CollectionUtil.ToList``2(System.Collections.Generic.IEnumerable{``1},``0)">
            <summary>转换为强类型集合</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.CollectionUtil.ToDictionary``3(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``1,``2}},``0)">
            <summary>转换为强类型字典</summary>
        </member>
        <member name="T:Jurassic.So.Infrastructure.DataTimeUtil">
            <summary>日期时间工具</summary>
        </member>
        <member name="P:Jurassic.So.Infrastructure.DataTimeUtil.StandardFormat">
            <summary>生成标准业务时间串</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.DataTimeUtil.ToStandardString(System.DateTime)">
            <summary>生成标准业务时间串</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.DataTimeUtil.TryParseStandardString(System.String)">
            <summary>生成标准时间</summary>
        </member>
        <member name="T:Jurassic.So.Infrastructure.MongoAccess`1">
            <summary>
            Mongodb数据访问
            </summary>
            <typeparam name="T">数据表对应模型</typeparam>
        </member>
        <member name="F:Jurassic.So.Infrastructure.MongoAccess`1.ConnectStr">
            <summary>
            Mongodb链接字符串
            </summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.MongoAccess`1.Database">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.MongoAccess`1.Collection">
            <summary>
            集合表名称
            </summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.#ctor">
            <summary>
            无参构造
            </summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.#ctor(System.String)">
            <summary>
            有参构造
            </summary>
            <param name="collection">集合名称</param>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.#ctor(System.String,System.String,System.String)">
            <summary>
            有参构造
            </summary>
            <param name="connectStr">链接字符串</param>
            <param name="database">数据库名称</param>
            <param name="collection">集合名称</param>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.GetCollection">
            <summary>
            获得集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.InsertAsync(`0)">
            <summary>
            插入一份文档（异步）
            </summary>
            <param name="doc"></param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.InsertAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            插入多份文档（异步）
            </summary>
            <param name="docs"></param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.Insert(`0)">
            <summary>
            插入一份文档
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            插入多份文档
            </summary>
            <param name="docs"></param>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.ReplaceAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0,MongoDB.Driver.UpdateOptions)">
            <summary>
            替换一份文档
            </summary>
            <param name="filter">过滤找到待替换的文档</param>
            <param name="t">新的文档</param>
            <param name="options">更新选项</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.Replace(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0,MongoDB.Driver.UpdateOptions)">
            <summary>
            替换一份文档
            </summary>
            <param name="filter">过滤找到待替换的文档</param>
            <param name="t">新的文档</param>
            <param name="options">更新选项</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.ReplaceManyAsync(System.Collections.Generic.IEnumerable{`0},System.Func{`0,MongoDB.Driver.FilterDefinition{`0}},MongoDB.Driver.UpdateOptions)">
            <summary>
            替换多份文档
            </summary>
            <param name="docs">文档集合</param>
            <param name="filterBuidler"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.ReplaceMany(System.Collections.Generic.IEnumerable{`0},System.Func{`0,MongoDB.Driver.FilterDefinition{`0}},MongoDB.Driver.UpdateOptions)">
            <summary>
            替换多份文档
            </summary>
            <param name="docs">文档集合</param>
            <param name="filterBuidler"></param>
            <param name="options"></param>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.UpdateAsync(MongoDB.Driver.FilterDefinition{`0},MongoDB.Driver.UpdateDefinition{`0},MongoDB.Driver.UpdateOptions)">
            <summary>
            更新一份文档（异步）
            </summary>
            <param name="filter">过滤器</param>
            <param name="update">更新的定义</param>
            <param name="options">更新选项</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.Update(MongoDB.Driver.FilterDefinition{`0},MongoDB.Driver.UpdateDefinition{`0},MongoDB.Driver.UpdateOptions)">
            <summary>
            更新一份文档
            </summary>
            <param name="filter">过滤器</param>
            <param name="update">更新定义</param>
            <param name="options">更新选项</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.UpdateManyAsync(MongoDB.Driver.FilterDefinition{`0},MongoDB.Driver.UpdateDefinition{`0},MongoDB.Driver.UpdateOptions)">
            <summary>
            更新多份文档（异步）
            </summary>
            <param name="filter">过滤器</param>
            <param name="update">更新的定义</param>
            <param name="options">更新选项</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.UpdateMany(MongoDB.Driver.FilterDefinition{`0},MongoDB.Driver.UpdateDefinition{`0},MongoDB.Driver.UpdateOptions)">
            <summary>
            更新多份文档
            </summary>
            <param name="filter">过滤器</param>
            <param name="update">更新定义</param>
            <param name="options">更新选项</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.DeleteAsync(MongoDB.Driver.FilterDefinition{`0})">
            <summary>
            删除多份文档（异步）
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.Delete(MongoDB.Driver.FilterDefinition{`0})">
            <summary>
            删除多份文档
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除多份文档（异步）
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除多份文档
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.GetOneAsync(MongoDB.Driver.FilterDefinition{`0})">
            <summary>
            查询过滤返回符合条件的一份文档（异步）
            </summary>
            <param name="filter">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.GetOneAsync(MongoDB.Driver.FilterDefinition{`0},MongoDB.Driver.ProjectionDefinition{`0})">
            <summary>
            查询过滤返回符合条件的一份文档（异步）
            </summary>
            <param name="filter">过滤条件</param>
            <param name="projection">字段投影</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.GetOne(MongoDB.Driver.FilterDefinition{`0})">
            <summary>
            查询过滤返回符合条件的一份文档
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.GetManyAsync(MongoDB.Driver.FilterDefinition{`0},MongoDB.Driver.SortDefinition{`0},MongoDB.Driver.ProjectionDefinition{`0})">
            <summary>
            查询获得多份文档（异步）
            </summary>
            <param name="filter">查询条件</param>
            <param name="sorter">结果排序</param>
            <param name="projection">字段投影</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.GetMany(MongoDB.Driver.FilterDefinition{`0},MongoDB.Driver.SortDefinition{`0},MongoDB.Driver.ProjectionDefinition{`0})">
            <summary>
            查询获得多份文档
            </summary>
            <param name="filter">查询条件</param>
            <param name="sorter">结果排序</param>
            <param name="projection">字段投影</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.GetCountAsync(MongoDB.Driver.FilterDefinition{`0})">
            <summary>
            获得匹配文档个数（异步）
            </summary>
            <param name="filter">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.GetCount(MongoDB.Driver.FilterDefinition{`0})">
            <summary>
            获得匹配文档个数
            </summary>
            <param name="filter">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.GetPagination(MongoDB.Driver.FilterDefinition{`0},MongoDB.Driver.SortDefinition{`0},MongoDB.Driver.ProjectionDefinition{`0},System.Int32,System.Int32)">
            <summary>
            获得分页查询结果
            </summary>
            <param name="filter">查询条件</param>
            <param name="sorter">结果排序</param>
            <param name="projection">字段投影</param>
            <param name="from">记录开始</param>
            <param name="size">记录条数</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.GetPaginationAsync(MongoDB.Driver.FilterDefinition{`0},MongoDB.Driver.SortDefinition{`0},MongoDB.Driver.ProjectionDefinition{`0},System.Int32,System.Int32)">
            <summary>
            获得分页查询结果
            </summary>
            <param name="filter">查询条件</param>
            <param name="sorter">结果排序</param>
            <param name="projection">字段投影</param>
            <param name="from">记录开始</param>
            <param name="size">记录条数</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.GetPagination(MongoDB.Driver.FilterDefinition{`0},MongoDB.Driver.ProjectionDefinition{`0})">
            <summary>
            获得分页结果
            </summary>
            <param name="filter">查询条件</param>
            <param name="projection">字段投影</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.GetPagination(MongoDB.Driver.FilterDefinition{`0})">
            <summary>
            获得分页结果
            </summary>
            <param name="filter">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.GetPaginationAsync(MongoDB.Driver.FilterDefinition{`0},MongoDB.Driver.ProjectionDefinition{`0})">
            <summary>
            获得分页结果
            </summary>
            <param name="filter">查询条件</param>
            <param name="projection">字段投影</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccess`1.GetPaginationAsync(MongoDB.Driver.FilterDefinition{`0})">
            <summary>
            获得分页结果
            </summary>
            <param name="filter">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccessAuto.GetCollection(System.String)">
            <summary>
            获得集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccessAuto.GetAggregateAsync(MongoDB.Driver.PipelineDefinition{MongoDB.Bson.BsonDocument,MongoDB.Bson.BsonDocument})">
            <summary>
            获得聚合结果
            </summary>
            <param name="pipeline"></param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.MongoAccessAuto.GetAggregate(MongoDB.Driver.PipelineDefinition{MongoDB.Bson.BsonDocument,MongoDB.Bson.BsonDocument})">
            <summary>
            获得聚合结果
            </summary>
            <param name="pipeline"></param>
            <returns></returns>
        </member>
        <member name="T:Jurassic.So.Infrastructure.WebUtil">
            <summary>WEB工具</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.WebUtil.GetDomainUrl(System.Uri)">
            <summary>获得URL中的域名URL(类似http://www.temp.com/)</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.WebUtil.GetQueryUrl(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>构造带查询串的URL(类似http://www.temp.com/Index?a=***&amp;b=***)</summary>
        </member>
        <member name="T:Jurassic.So.Infrastructure.Utility">
            <summary>通用工具</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Utility.As``1(System.Object)">
            <summary>转换类型</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Utility.CastTo``1(System.Object)">
            <summary>强制转换类型</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Utility.In``1(``0,``0[])">
            <summary>值是否在数组中</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Utility.FastIn``1(``0,``0[])">
            <summary>值是否在数组中</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Utility.DeepClone``1(``0)">
            <summary>深克隆</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Utility.GetPagerOrDefault(Jurassic.PKS.Service.Pager)">
            <summary>获得分页参数或其默认值</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Utility.GetPagerOrDefault(Jurassic.PKS.WebAPI.Models.IPagerRequest)">
            <summary>获得分页参数或其默认值</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Utility.GetValidPager(Jurassic.PKS.Service.Pager,Jurassic.PKS.Service.Pager@)">
            <summary>
            获得合法的pager
            </summary>
            <param name="pager">给定pager</param>
            <param name="validPager">转化之后的pager</param>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Utility.ToByteArray(System.IO.Stream)">
            <summary>生成字节数组</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Utility.ToStream(System.Xml.XmlDocument)">
            <summary>生成流</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.Utility.GetAssemblyConfigFile(System.Reflection.Assembly)">
            <summary>获得程序集配置文件</summary>
        </member>
        <member name="T:Jurassic.So.Infrastructure.StringUtil">
            <summary>字符串工具</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.StringUtil.IsNullOrEmpty(System.String)">
            <summary>是否NULL或Empty</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.StringUtil.IsNumberic(System.String,System.Double@)">
            <summary>
            判断字符串是否为数字字符串
            </summary>
            <param name="message">指定的字符串</param>
            <param name="result">返回对应的浮点数</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.StringUtil.IsDate(System.String,System.DateTime@)">
            <summary>
            判断字符串是否为日期
            </summary>
            <param name="strDate">指定字符串</param>
            <param name="result">返回转化的日期</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.StringUtil.IsContainRegex(System.String)">
            <summary>
            判断是否包含通配符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.StringUtil.RemoveSubScript(System.String)">
            <summary>
            删除字符串中包含的下标
            </summary>
            <param name="str">带下标的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.StringUtil.JsonToCamelCase(System.String)">
            <summary>转换为驼峰写法(JSON方式)</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.StringUtil.ToTitleCase(System.String)">
            <summary>
            转化字符串为首字母大写，同时会将首字符之后的转化为小写
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.StringUtil.ToUpperInitial(System.String)">
            <summary>
            字符串首字母转化大写，其他字符不变
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Jurassic.So.Infrastructure.StringUtil.FormatBy(System.String,System.String[])">
            <summary>格式化</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.StringUtil.ToHex2(System.Byte)">
            <summary>生成十六进制字符串</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.StringUtil.ToHexString(System.Byte[])">
            <summary>生成字节数组的十六进制字符串</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.StringUtil.ToInt32(System.String)">
            <summary>转成整数</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.StringUtil.ToEnum``1(System.String)">
            <summary>枚举转换</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.StringUtil.ToBool(System.String)">
            <summary>布尔转换</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.StringUtil.Base64Encode(System.String,System.Text.Encoding)">
            <summary>Base64编码</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.StringUtil.Base64Utf8Encode(System.String)">
            <summary>Base64(UTF8)编码</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.StringUtil.Base64Decode(System.String,System.Text.Encoding)">
            <summary>Base64解码</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.StringUtil.Base64Utf8Decode(System.String)">
            <summary>Base64(UTF8)解码</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.StringUtil.QueryStringChars">
            <summary>查询串编码字符数组</summary>
        </member>
        <member name="F:Jurassic.So.Infrastructure.StringUtil.QueryStringEncodeStrings">
            <summary>查询串编码值数组</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.StringUtil.QueryStringEncode(System.String)">
            <summary>查询串编码</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.StringUtil.QueryStringDecode(System.String)">
            <summary>查询串解码</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.StringUtil.CreateInstanceFromName(System.String)">
            <summary>根据类型名称创建实例</summary>
        </member>
        <member name="T:Jurassic.So.Infrastructure.HashUtil">
            <summary>Hash工具</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.HashUtil.ToMD5(System.String)">
            <summary>生成MD5</summary>
        </member>
        <member name="T:Jurassic.So.Infrastructure.JsonUtil">
            <summary>JSON工具</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.JsonUtil.ToJsonString(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>生成对象缩进的JSON串</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.JsonUtil.ToJsonPlain(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>生成对象非缩进的JSON串</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.JsonUtil.JsonTo(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>根据JSON串生成对象</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.JsonUtil.JsonTo``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>根据JSON串生成对象</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.JsonUtil.JsonToDictionary(Newtonsoft.Json.Linq.JObject)">
            <summary>JObject转换为字典对象</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.JsonUtil.JsonToDictionary``1(Newtonsoft.Json.Linq.JObject,``0)">
            <summary>JObject转换为字典对象</summary>
        </member>
        <member name="M:Jurassic.So.Infrastructure.JsonUtil.JsonToObject(Newtonsoft.Json.Linq.JToken)">
            <summary>JObject转换为对象</summary>
        </member>
        <member name="T:Jurassic.So.Expression.AggregateOperator">
            <summary>聚合运算符</summary>
        </member>
        <member name="F:Jurassic.So.Expression.AggregateOperator.Count">
            <summary>计数</summary>
        </member>
        <member name="F:Jurassic.So.Expression.AggregateOperator.Max">
            <summary>最大值</summary>
        </member>
        <member name="F:Jurassic.So.Expression.AggregateOperator.Min">
            <summary>最小值</summary>
        </member>
        <member name="F:Jurassic.So.Expression.AggregateOperator.Avg">
            <summary>平均值</summary>
        </member>
        <member name="F:Jurassic.So.Expression.AggregateOperator.Sum">
            <summary>和值</summary>
        </member>
        <member name="F:Jurassic.So.Expression.AggregateOperator.Custom">
            <summary>自定义</summary>
        </member>
        <member name="T:Jurassic.So.Web.WebExceptionConfig">
            <summary>WEB异常配置</summary>
        </member>
        <member name="P:Jurassic.So.Web.WebExceptionConfig.TypeMappers">
            <summary>异常类型映射</summary>
        </member>
        <member name="P:Jurassic.So.Web.WebExceptionConfig.WebTypeMappers">
            <summary>WEB异常类型映射</summary>
        </member>
        <member name="P:Jurassic.So.Web.WebExceptionConfig.WebCodeMappers">
            <summary>WEB异常代码映射</summary>
        </member>
        <member name="M:Jurassic.So.Web.WebExceptionConfig.Initialize">
            <summary>初始化</summary>
        </member>
        <member name="M:Jurassic.So.Web.WebExceptionConfig.InitTypeMappers">
            <summary>配置异常类型映射</summary>
        </member>
        <member name="M:Jurassic.So.Web.WebExceptionConfig.InitCodeMappers">
            <summary>配置异常代码映射</summary>
        </member>
        <member name="M:Jurassic.So.Web.WebExceptionConfig.LoadConfig(System.String)">
            <summary>从配置文件加载</summary>
        </member>
        <member name="M:Jurassic.So.Web.WebExceptionConfig.MapTo(System.Exception,System.String,Jurassic.So.Infrastructure.ExceptionModel)">
            <summary>配置异常类型映射</summary>
            <param name="ex">异常实例</param>
            <param name="service">服务名称，MVC控制器或API控制器默认为控制器名称(不包括后缀Controller)</param>
            <param name="exceptionModel">异常数据</param>
        </member>
        <member name="T:Jurassic.So.Web.IWebExceptionMap">
            <summary>WEB异常映射</summary>
        </member>
        <member name="P:Jurassic.So.Web.IWebExceptionMap.ServiceName">
            <summary>服务名称</summary>
        </member>
        <member name="M:Jurassic.So.Web.IWebExceptionMap.Config">
            <summary>配置</summary>
        </member>
        <member name="T:Jurassic.So.Web.WebExceptionModel">
            <summary>WEB异常数据</summary>
        </member>
        <member name="P:Jurassic.So.Web.WebExceptionModel.StatusCode">
            <summary>状态代码</summary>
        </member>
        <member name="P:Jurassic.So.Web.WebExceptionModel.ReasonPhrase">
            <summary>原因短语，允许为null，为null使用状态代码的默认值</summary>
        </member>
        <member name="P:Jurassic.So.Web.WebExceptionModel.BadRequest">
            <summary>BadRequest</summary>
        </member>
        <member name="P:Jurassic.So.Web.WebExceptionModel.Unauthorized">
            <summary>Unauthorized</summary>
        </member>
        <member name="P:Jurassic.So.Web.WebExceptionModel.ServerProcessingFailed">
            <summary>服务器处理失败</summary>
        </member>
    </members>
</doc>
