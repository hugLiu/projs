<div size="25%" showcollapsebutton="false" style="height: 100%;">
    <div style="background-color: #f5f5f5; height: 5%; ">
        <div style="padding-right: 8px;">
            <h5>业务对象管理 <small>选择对象类别编辑对象树</small></h5>
        </div>
    </div>
    <div style="height: 8%;padding:7px 0px 0px 5px;">
        <div style="float:left;">对象类别：</div>
        <div style="">
            <input id="comboxBO" class="mini-combobox" style="width: 150px;" emptyText="请选择..."
                   textfield="Title" valuefield="Id" allowInput="true" onvaluechanged="onBocChanged" />
        </div>
    </div>
    <div class="mini-toolbar" style="padding-top: 3px; padding-left: 2px;">
        <a class="mini-button frame-submit mini-button-plain" onclick="onAdd">
            <span class="mini-button-text  mini-button-icon icon-new-add">新增对象</span>
        </a>
        <a class="mini-button frame-submit mini-button-plain" onclick="onAddChild">
            <span class="mini-button-text  mini-button-icon icon-new-addchild">新增子对象</span>
        </a>
        <a class="mini-button frame-submit mini-button-plain" onclick="onRemove">
            <span class="mini-button-text  mini-button-icon icon-new-delete">删除对象</span>
        </a>
    </div>
    <div class="mini-fit" style="width: 100%; padding-left: 25px; height: 75%;">
        <div style="padding-top: 10px; height: 50%">
            <ul id="treeBO" class="mini-tree"
                showtreeicon="true"
                textfield="Name" valuefield="BOC" idfield="ID" parentfield="PID"
                resultastree="false" expandonload="1" onendedit="endEdit" onnodedblclick="onEdit"></ul>
        </div>
    </div>
</div>

<style>

</style>

<script type="text/javascript">
    mini.parse();

    var treeBO = mini.get("treeBO");
    var comboxBO = mini.get("comboxBO");
    var _type = "";

    $.newGET('@Url.Action("GetGT_CodeTypeInfo", "BOManage", new { code = "BOC" })', fillData);

    function fillData(result) {
        var id = result[0].Id;
        getAllBoc(id);
    }

    function getAllBoc(_id) {
        comboxBO.load("@Url.Action("GetGT_CodeInfo", "BOManage")?id=" + _id);
        load();
    }

    function load() {
        comboxBO.select(0);
        _type = comboxBO.text;
        if (_type != "") {
            $.newGET('@Url.Action("GetBOBaseInfo", "BOManage")', { type: _type }, setData);
        }
    }

    function onBocChanged(e) {
        var sender = e.sender;
        _type = sender.text;
        $.newGET('@Url.Action("GetBOBaseInfo", "BOManage")', { type: _type }, setData);
    }

    function setData(result) {
        treeBO.loadList(result);
        var i = 0;
        treeBO.cascadeChild(treeBO.getRootNode(), function (node) {
            if (node.PID == null && i == 0) {
                treeBO.selectNode(node);
            }
            i++;
        });
    }

    //增加节点
    function onAdd() {
        var node = treeBO.getSelectedNode();
        if (node != null) {
            expandNodeFunc(node);
        }
        var newNode = { Name: "新建对象" };
        treeBO.addNode(newNode, "after", node);
        treeBO.beginEdit(newNode);
        //treeBO.scrollIntoView(newNode);
    }

    function expandNodeFunc(node) {
        var parentNode = treeBO.getParentNode(node);
        if (parentNode != null) {
            if (!treeBO.isExpandedNode(parentNode)) {
                treeBO.expandNode(parentNode);
            }
            expandNodeFunc(parentNode);
        }
    }
    //增加子节点
    function onAddChild() {
        var node = treeBO.getSelectedNode();
        if (node != null) {
            expandNodeFunc(node);
            if (!treeBO.isExpandedNode(node)) {
                treeBO.expandNode(node);
            }
        }
        var newNode = { Name: "新建对象" };
        treeBO.addNode(newNode, "add", node);
        treeBO.beginEdit(newNode);
        //treeBO.scrollIntoView(newNode);
    }
    //编辑节点
    var editNodeName = "";
    function onEdit() {
        var node = treeBO.getSelectedNode();
        editNodeName = node.Name;
        treeBO.beginEdit(node);
    }

    function endEdit(e, flag) {
        var node = e.node;
        var name = node.Name;
        // 编辑时排除自身项，name 不做任何改变时
        if (editNodeName == name) {
            return;
        }
        if (flag) {
            $.ajax({
                url: "/BOManage/GetBOInfoNameCount",
                type: "get",
                data: { name: encodeURIComponent(name), type: encodeURIComponent(_type) },
                success: function (result) {
                    if (result > 0) {
                        //重名
                        alert("对象名已存在！");
                        node.Name = "重命名";
                        treeBO.beginEdit(node, true);
                    } else {
                        treeBO.beginEdit(node, false);
                    }
                }
            });
        } else {
            $.ajax({
                url: "/BOManage/GetBOInfoNameCount",
                type: "get",
                data: { name: encodeURIComponent(name), type: encodeURIComponent(_type) },
                success: function (result) {
                    if (result > 0) {
                        //重名
                        alert("对象名已存在！");
                        node.Name = "重命名";
                        treeBO.beginEdit(node, true);
                    } else {
                        if (node != null) {
                            if (node.Name == "") {
                                node.Name = "新建对象";
                            }
                            if ("ID" in node) {
                                SaveData();
                            } else {
                                NewNodeSaveData(node);
                            }
                        }
                    }
                }
            });
        }
    }

    //删除节点数据
    function onRemove() {
        var node = treeBO.getSelectedNode();
        if (node) {
            if (!treeBO.isLeaf(node)) {
                alert("该节点还存在下级节点，无法直接删除，请先删除下级节点");
                return;
            }
            if (confirm("确定删除选中节点?")) {
                treeBO.removeNode(node);
                SaveData();
                _BOAliasGrid.clearRows();
                var form = new mini.Form("#_BO_BaseInfo");
                form.clear();
                var form2 = new mini.Form("#_BO_Feature");
                form2.clear();
            }
        }
    }

    //保存树节点信息
    function SaveData() {
        //treeBO.commitEdit();
        var data = treeBO.getChanges();
        var msgid = mini.loading("数据保存中，请稍后......", "保存数据");
        var nodeParams = mini.encode(data);
        $.ajax({
            url: "/BOManage/UpdateBOBaseInfo",
            data: { nodeParams: encodeURIComponent(nodeParams), boc: _type },
            type: "get",
            success: function (text) {
                mini.hideMessageBox(msgid);
                treeBO.accept();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                //treeBO.reload();
            }
        });
    }

    ///新增树节点
    function NewNodeSaveData(node) {
        var data = treeBO.getChanges();
        var nodeParams = mini.encode(data);
        var msgid = mini.loading("数据保存中，请稍后......", "保存数据");
        $.ajax({
            url: "/BOManage/AddBOBaseInfo?=",
            data: { nodeParams: encodeURIComponent(nodeParams), boc: _type },
            type: "post",
            async: false,
            success: function (text) {
                console.log(text);
                mini.hideMessageBox(msgid);
                node.ID = text;
                treeBO.accept();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                alert(jqXHR.responseText);
            }
        });
    } 

    //树节点选择事件
    treeBO.on("nodeselect", function (e) {
        if (e) {
            var id = e._records[0].ID;
            if (id)
                loadBOTab(_type, id);
        }
    });
</script>